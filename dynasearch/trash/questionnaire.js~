
//Helper Functions

function dce(type){
   return document.createElement(type);
}

function hexEncode(str){
   return str.split("").map(function(strchar){return strchar.charCodeAt(0).toString(16);}).join('.');
}

function hexDecode(str){
   return str.split('.').map(function(hexchar){return String.fromCharCode(parseInt(hexchar,16));}).join("");
}


/*
 * Questionnaire Class
 */
var Questionnaire = new Class(
{
   // Initialize Questionnaire
   initialize: function(nName){
      this.name      = (nName==undefined)?"anonymous":nName;
      this.elements  = new Array();
      this.sections  = {};
      this.iid       = 0;
   },

   getItemId: function(){
      return this.iid++;
   },
   filter: function(callback,othis){
      this.elements = this.elements.filter(callback,othis);
   },
   registerSection:  function(nsec){
      //this.sections[secName] = new QuestSection({Q:this,title:secName});
      //this.elements.push(this.sections[secName]);

      this.sections[nsec.title] = nsec;
   },
   unregisterSection:  function(secName){
      //this.sections[secName] = undefined;
      delete this.sections[secName];
      //var ndx = this.sections.indexOf(secName);
      //this.sections.splice(ndx,1);
   },
   push: function(el){
      this.elements.push(el);
   },

   appendItems: function( questStr ){

      // Parse DOM String
      var questDoc;
      if ( window.DOMParser ) {
         parser = new DOMParser();
         questDoc = parser.parseFromString( questStr,'text/xml' );
      } else {
         questDoc = new ActiveXObject( 'Microsoft.XMLDOM' );
         questDoc.async=false;
         questDoc.loadXML( questStr );
      }
      var root = questDoc.documentElement;

      for ( var i = 0; i < root.childNodes.length; ++i ) {
         this.push( parseDOMItem( root.childNodes[i], this ) );
      }
   },

   getName: function(){
      return (this.name==null)?"(root)":this.name;
   },
   setName: function(nname){
      this.name = nname;
   },
   genQuestionString: function(){
      var qarr = [];
      for(var i=0; i < this.elements.length; ++i){
          qarr = qarr.concat(this.elements[i].genQuestions());
      }
      return qarr.join(' ');
   },
   genString:  function(){
      var str  = "<questionnaire name='"+hexEncode(this.name)+"'>";
      for(var i=0; i < this.elements.length; ++i)
          str += this.elements[i].genString();
      return str + "</questionnaire>";
   },

   genResult:  function ( page ) {

      var el = new Element(
         'questionnaire',
         {
            'page' : page
         }
      );

      for ( var i = 0; i < this.elements.length; ++i ) {
         var child = this.elements[i].genResult();
         if ( child != false ) {
            el.adopt( child );
         }
      }
      return el;
   },

   genElement:  function(forreal){
      //alert(this.elements);
      if(forreal == undefined) forreal = false;
      var quest = document.createElement('div');
          quest.id = "accordion";
          quest.className = "questionairre";
          quest.name = this.name;
      for(var i=0; i < this.elements.length; ++i){
          quest.appendChild(this.elements[i].genElement(forreal));
         /*
         var cur_el = this.elements[i].genElement(forreal);
         if(forreal && this.elements[i].type == 'section'){
            while(cur_el.childNodes.length != 0){
              var guy = cur_el.removeChild(cur_el.firstChild);
              quest.appendChild(guy);
              // alert(cur_el.childNodes[ci].tagName);
               //quest.appendChild(cur_el.childNodes[ci]);
            }
         }else{
            quest.appendChild(cur_el);
         }
         */
      }

      if(forreal){
         var questionstring = this.genQuestionString();
         var hiddenqs = dce('input');
             hiddenqs.type  = 'hidden';
             hiddenqs.name  = 'questions';
             hiddenqs.value = questionstring;

         quest.appendChild(hiddenqs);
      }

      return quest;
   },
   wrapElement: function(element,item){
      var wrapper = document.createElement('div');
          wrapper.className = "element_wrapper";

      var row = document.createElement('tr');
      var d1  = document.createElement('td'); //Resection
      var d2  = document.createElement('td'); //Up
      var d3  = document.createElement('td'); //Down
      var d4  = document.createElement('td'); //Delete

      var selectSection = document.createElement('select');
      if(item.type == 'section'){
         var optsec = document.createElement('option');
             optsec.value = optsec.innerHTML = '---';
         selectSection.appendChild(optsec);
      }else{
         var optnone = document.createElement('option');
             optnone.value = optnone.innerHTML = '(none)';
         if(item.section === null) optnone.selected = true;
         selectSection.appendChild(optnone);
         for (sec in theQuest.sections ){
            if(sec === item.title) continue;
            var opt = document.createElement('option');
                opt.value = opt.innerHTML = sec;
            if(sec == item.section) opt.selected = true;
            selectSection.appendChild(opt);
         }
         selectSection.onchange = function(){item.handleResection(selectSection.value);};
      }
      d1.appendChild(selectSection);

      var img2 = document.createElement('img');
          img2.src = './assets/images/glyph_up.png';
      //    img2.width = img2.height = '16px';
          img2.onclick = function(){item.handleUp();};
      var img3 = document.createElement('img');
          img3.src = './assets/images/glyph_down.png';
       //   img3.width = img3.height = '16px';
          img3.onclick = function(){item.handleDown();};
      var img4 = document.createElement('img');
          img4.src = './assets/images/glyph_remove.png';
        //  img4.width = img4.height = '16px';
          img4.onclick = function(){item.handleDelete();};

      d2.appendChild(img2);
      d3.appendChild(img3);
      d4.appendChild(img4);

      row.appendChild(d1);
      row.appendChild(d2);
      row.appendChild(d3);
      row.appendChild(d4);

      wrapper.appendChild(row);
      wrapper.appendChild(element);

      return wrapper;
   },
   draw: function(forreal){
      if(forreal == undefined) forreal = false;
      document.getElementById('newQuest').innerHTML = "";
      document.getElementById('newQuest').appendChild(this.genElement(forreal));
   }
}
);


function parseDOMItem( root, quest ) {
   switch ( root.tagName ) {
      case 'section':
      case 'SECTION':
         var command = {};
             command.Q     = quest;
             command.id    = parseInt(root.attributes['id'].value,10);
             command.title = hexDecode(root.attributes['title'].value);
         var nsection = new QuestSection(command);

         for ( var i = 0; i < root.childNodes.length; ++i ) {
            var nitem = parseDOMItem( root.childNodes[i], quest );
            nsection.addItem(nitem);
         }

         return nsection;
         break;

      case 'textquestion':
      case 'TEXTQUESTION':
         var command = {};
             command.Q             = quest;
             command.id            = parseInt(root.attributes['id'].value,10);
             command.fieldLength   = root.attributes['fieldLength'].value;
             command.text          = hexDecode(root.textContent);
         return new TextQuest(command);
         break;

      case 'textline':
      case 'TEXTLINE':
         var command = {};
             command.Q    = quest;
             command.id   = parseInt(root.attributes['id'].value,10);
             command.text = hexDecode(root.textContent);
         return new TextLine(command);
         break;

      case 'radioquestion':
      case 'RADIOQUESTION':
         var N   = parseInt(root.attributes['num'].value,10);
         answers = new Array(N);
         answerNodes = root.getElementsByTagName('ans');
         for ( var i = 0; i < answerNodes.length; ++i ) {
            var node_i = answerNodes[i];
            var ndx    = parseInt(node_i.attributes['num'].value,10);
            answers[ndx] = hexDecode(node_i.textContent);
         }
         var command = {};
             command.Q       = quest;
             command.id      = parseInt(root.attributes['id'].value,10);
             command.answers = answers;
             command.text    = hexDecode(root.getElementsByTagName('question')[0].textContent);
         return new RadioQuest(command);
         break;
   }
};

function makeQuestItem( command ) {
   switch ( command.type ) {
   case "section"    : 
      return new QuestSection( command );
      break;

   case "radioQuest" : 
      return new RadioQuest( command );
      break;

   case "textQuest"  : 
      return new TextQuest( command );
      break;

   case "textline"   : 
      return new TextLine( command );
      break;
   }
};


/*
 * Questionnaire Item Base Class
 */
var QuestItem = new Class(
{
   initialize: function(args){
      if( args.id === undefined ) this.id = args.Q.getItemId();
      else                        this.id = args.id;

      this.Q = args.Q;
      this.section = (args.section==undefined)?null:args.section;
      this.type = "item";
   },
   isRequired: function(){
      return false;
   },
   genString:  function(){
   },

   genResult:  function() {
   },

   genElement:  function(forreal){
   },
   goQuietlyIntoThatNight: function(){
      var me = this;
      var rm = function(e,i,a){ return e != me ; };
      if(this.section==null) this.Q.filter(rm);
      else this.Q.sections[this.section].filter(rm);

      if(this.type == 'section') this.Q.unregisterSection(this.title);
   },
   handleDelete: function(){
      this.goQuietlyIntoThatNight();
      updateQuestionnaire();
   },
   handleUp: function(){
      if(this.section==null) shiftUp(this.Q.elements,this.id);
      else                   shiftUp(this.Q.sections[this.section].children,this.id);

      updateQuestionnaire();
   },
   handleDown: function(){
      if(this.section==null) shiftDown(this.Q.elements,this.id);
      else                   shiftDown(this.Q.sections[this.section].children,this.id);

      updateQuestionnaire();
   },
   genQuestions: function(){
      return [];
   },
   handleResection: function(nsection){
      this.goQuietlyIntoThatNight();
      if(nsection == '(none)'){
         theQuest.push(this);
         this.section = null;
      }else{
         theQuest.sections[nsection].addItem(this);
         this.section = nsection;
      }
      updateQuestionnaire();
   },
   wrapped: function(el){
      return this.Q.wrapElement(el,this);
   }
}
);



/*
 * Questionnaire Section Class
 */
var QuestSection = new Class(
{
   Extends: QuestItem,
   initialize: function(args){
      this.parent(args);
      this.title    = args.title;
      this.children = new Array();
      this.type = "section";
      this.Q.registerSection( this );
   },
   genQuestions: function(){
      var ret = [];
      for(var i=0; i < this.children.length; ++i){
          ret = ret.concat(this.children[i].genQuestions());
      }
      return ret;
   },
   filter: function(callback,othis){
      this.children = this.children.filter(callback,othis);
   },
   addItem: function(nChild){
      nChild.section = this.title;
      this.children.push(nChild);
   },
   removeItemById: function(id2rm){
      this.children.filter(function(_v,_i,_a){return _v.id != id2rm;});
   },
   genString:  function(){
      var str  = "<section id='"+this.id+"' title='"+hexEncode(this.title)+"'>";
          //str += "<sectitle>"+this.title+"</sectitle>";
      for(var i=0; i < this.children.length; ++i)
          str += this.children[i].genString();

      return str + "</section>";
   },

   genResult:  function() {
      var el = new Element(
         'section',
         {
            'title' : this.title
         }
      );
      for ( var i = 0; i < this.children.length; ++i ) {
          el.adopt( this.children[i].genResult() );
      }
      return el;
   },

   genElement:  function(forreal){
      var header = dce('h3');
          header.className = "toggler";
          header.innerHTML = this.title;
      var elements = dce('div');
          elements.className = 'element';
          //elements.className = "sectionBody";
      var ret = dce('div');

      for(var i=0; i < this.children.length; ++i)
         elements.appendChild(this.children[i].genElement(forreal));

      ret.appendChild(header);
      ret.appendChild(elements);

      return forreal?ret:this.wrapped(ret);
   }
}
);



/*
 * Questionnaire Radio Question Class
 */
var RadioQuest = new Class(
{
   Extends: QuestItem,
   initialize: function(args){
      this.parent(args);

      this.text    = args.text;
      this.answers = args.answers;
      this.type = "radioquest";
   },
   isRequired: function(){
      return true;
   },
   genQuestions: function(){
      return ['q'+this.id];
   },
   genString:  function() {
      var str  = "<radioquestion id='"+this.id+"' num='"+this.answers.length+"'>";
          str += "<question>"+hexEncode(this.text)+"</question>";
      for(var i=0; i < this.answers.length; ++i){
         str += "<ans num='"+i+"'>"+hexEncode(this.answers[i])+"</ans>";
      }
      return str+"</radioquestion>";
   },

   genResult:  function(){

      var answer = $('q' + this.id).value;
      return new Element(
         'radioquestion',
         {
            'question' : this.text,
            'answer'   : answer
         }
      );
   },

   genElement:  function(forreal){
      var bq1  = document.createElement("blockquote");
      var para = document.createElement("p");
          para.innerHTML = this.text;
      var bq2  = document.createElement("blockquote");
          bq2.innerHTML = '';
      for(var i=0; i < this.answers.length; ++i){
         //var na = document.createElement("input");
         //    na.type="radio";
         //    na.id="q"+this.id;
         //    na.value=i;
         var answerText    = this.answers[i];
         var answerURItext = encodeURI(answerText);
         bq2.innerHTML += '<input type="radio" id="q' + this.id + '" name="q' + this.id + '" value="' + answerURItext + (forreal?'" required />':'" />') + answerText + '&#160;&#160;&#160;&#160;&#160;';
      }
      bq1.appendChild(para);
      bq1.appendChild(bq2);

      return forreal?bq1:this.wrapped(bq1);
   }
}
);


/*
 * Questionnaire Text Question Class
 */
var TextQuest = new Class(
{
   Extends: QuestItem,
   initialize: function(args){
      this.parent(args);

      this.text        = args.text;
      this.fieldLength = args.fieldLength;
      this.type = "textquest";
   },
   isRequired: function(){
      return true;
   },
   genQuestions: function(){
      return ['q'+this.id];
   },
   genString:  function(){
      return "<textquestion id='"+this.id+"' fieldLength='"+this.fieldLength+"'>"
            +hexEncode(this.text)+"</textquestion>";
   },

   genResult:  function () {

      var answer = $('q' + this.id).value;
      return new Element(
         'radioquestion',
         {
            'question' : this.text,
            'answer'   : answer
         }
      );
   },

   genElement:  function(forreal){
      var element = document.createElement("blockquote");
      var innerBQ = document.createElement("blockquote");
      var para    = document.createElement("p");
          para.innerHTML = this.text;

// Edited by Jordan
      var input; //   = document.createElement("input"); // DONT NEED THIS

      // This did nothing |
      //                  V
      //if(this.fieldLength > 0) input.maxlength = this.fieldLength; // DONT NEED THIS
      //input.maxlength = this.fieldLength; // DONT NEED THIS
      //input.name = // DONT NEED THIS

      if ((this.fieldLength > 80) || (this.fieldLength == 0)) {
         // For longer fields and unbounded, use a textarea
         input = document.createElement("textarea");
         input.rows = "2";
         input.cols = "80";
      } else {
         // Between 1 and 80 characters, use text line
         input   = document.createElement("input");
         input.type = "text";
      }

      // If length is nonzero, we need a maximum bound
      if (this.fieldLength > 0) {
         input.setAttribute("maxlength", this.fieldLength);
      }

      // Attributes independent of field length
      //input.size = 96; // DONT NEED THIS
      input.size = this.fieldLength;
      input.required = forreal;
      input.id   = "q" + this.id;

      innerBQ.appendChild(input);

      element.appendChild(para);
      element.appendChild(innerBQ);

      return forreal?element:this.wrapped(element);
   }
}
);



/*
 * Questionnaire Text Line Class
 */
var TextLine = new Class(
{
   Extends: QuestItem,
   initialize: function(args){
      this.parent(args);

      this.text = args.text;
      this.type = "textline";
   },
   genString:  function(){
      return "<textline id='"+this.id+"'>"+hexEncode(this.text)+"</textline>";
   },

   genResult:  function() {
      return false;
   },

   genElement:  function(forreal){
      var element = document.createElement('p');
          element.innerHTML = this.text;
      return forreal?element:this.wrapped(element);
   }
}
);
