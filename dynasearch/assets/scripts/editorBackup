
var experiment_shortname = '';
var pageadvnum = '';

var str_to_hex = function(s)
{
	var output = '';
	for(var i=0; i < s.length; i+=1)
	{
		output += s.charCodeAt(i).toString(16);
	}
	return output;
}

var hex_to_str = function(s)
{
	var output = '';
	for(var i=0; i < s.length; i+=2)
	{
		var code = parseInt('0x' + s.charAt(i).toString() + s.charAt(i+1).toString() );
		output += String.fromCharCode(code);
	}
	return output;
}

path_points = [];
tracking_parser = function(experiment, file)
{
	filepath = 'hurricane_data/' + experiment + '/' + file + '.txt';

	var req = new Request({
		url: filepath,
		async: false,
		onComplete: function(response) { 

			var lines = response.split('\n');

			var last = [-1,-1];
			for(var l=0; l < lines.length; l+=1)
			{
				// And split into an array of tokens
				var k = lines[l].split(',');		
				
				if(last[0] == -1)
				{
					last[0] = k[1];
					last[1] = k[2];
				} 

				// Results start on third line
				path_points[l] = [ k[0], parseFloat(last[1]), parseFloat(last[0]), parseFloat(k[2]), parseFloat(k[1]) ];

				last[0] = k[1];
				last[1] = k[2];
			}
		},
	}).send();
}
tracking_parser('experimentone', 'tracking');

var table_data = []
table_parser = function(experiment, file, receiver)
{
	filepath = 'hurricane_data/' + experiment + '/' + file;
	//alert(filepath);
	var req = new Request({
		url: filepath,
		async: false,
		onComplete: function(response) 
		{ 
			var lines = response.split('\n');
			var result = [];
			for(var l=0; l < lines.length; l+=1)
			{
				// And split into an array of tokens
				result[l] = lines[l].split(',');
				result[l].splice(result[l].length-1);
			}			
			table_data[file] = result;
		},
	}).send();
}

if (typeof Object.create !== 'function') {
    Object.create = function (o) {
        function F() {}
        F.prototype = o;
        return new F();
    };
}

// Remove items from an array based on another list of items
Array.prototype.removeItems = function(itemsToRemove) {

    if (!/Array/.test(itemsToRemove.constructor)) {
        itemsToRemove = [ itemsToRemove ];
    }

    var j;
    for (var i = 0; i < itemsToRemove.length; i++) {
        j = 0;
        while (j < this.length) {
            if (this[j] == itemsToRemove[i]) {
                this.splice(j, 1);
            } else {
                j++;
            }
        }
    }
}

//var timer = new BTimer(100, system_tick, []);
var randab = function(a,b) { return a + (b-a)*Math.random(); };

///////////////////////////////////////////////////////////////

// Handle the total count of Toolbars
var updatables = [];
function add_updatable(e)
{ updatables.push(e); }

var ___ToolbarCount=0;
function IncrementToolbarCount(d)
{ ___ToolbarCount += 1; }
function GetToolbarCount()
{ return ___ToolbarCount; }

// Window Class
var Window = new Class({
	initialize: function(content, title) {
		// Increment the total count
		IncrementToolbarCount(1);
		
		// Create the Div with relavent XHTML
		this.div = document.createElement('div');
		this.div.trashable = this.trashable = true;
		this.div.barnum = GetToolbarCount();
		this.div.setAttribute('id', 'toolbar' + (GetToolbarCount()).toString() + 'div');
		this.div.setAttribute('class','drag');
		if(content === undefined) { content = ''; }
		if(title === undefined) { title = "Untitled Window"; }
		this.div.innerHTML = '<div class="handle">' + title + '</h4>';
		this.div.innerHTML += '<div class="resize" style="position:absolute; right:0px; bottom: 0px;z-index:1;"><img src="assets/images/resize_icon.png" style="padding: 0 0; margin: 0 0;"/></div>';
		this.div.innerHTML += '<div class="infohandle" style="position:absolute; right:0px; top: 0px;"><img class="icon" src="assets/images/icon-info.png" style="padding: 0 0; margin: 0 0;" onmousedown="event.preventDefault();" /></div>';
		this.div.innerHTML += '<div class="content" id="'+ this.div.barnum +'_content">'+ content +'</div>';

		this.div.getElement('.infohandle').getElement('.icon').parent_div = this.div;

		//Add to the page
		document.body.appendChild(this.div);
		this.content = this.div.getElement('.content');
		
		var el = this.div;							
		var dr_alpha = .7;
		var drag_options = {
			onStart:function() { el.setOpacity(dr_alpha); },
			onComplete:function() { el.setOpacity(1); },
			handle: el.getElements('.handle')[0],
			droppables: '#trashbin',
			onDrop: function(el, d, event){
   			if(d)
   			{
					 if(el.trashable) { el.destroy(); }
		      }
			},
			onEnter: function(el, d){
				el.setAttribute('class','drag_enter');
			},
			onLeave: function(el, d){
				el.setAttribute('class','drag');
			}
		};
		
		var resize_options = {
			onStart:function() { el.setOpacity(dr_alpha); },
			onComplete:function() { el.setOpacity(1); el.getElement('.content').style.height = (el.getSize().y - el.getElement('.handle').getSize().y - 3) + "px"; },
			handle: el.getElements('.resize')[0]
		};

		this.dragobj = el.makeDraggable(drag_options);
		el.makeResizable(resize_options);
		
		this.div.classpointer = this;
		add_updatable(this);
	},
	get_width  : function() { return this.div.getSize().x; },
	get_height : function() { return this.div.getSize().y; },
	get_x	   : function() { return this.div.getPosition().x; },
	set_trashable: function(bool) { this.div.trashable = bool; },
	update : function(o) { },
});

// Toolbar class
var Toolbar = new Class({
	Extends: Window,
	initialize: function() {
		this.type = 'toolbar';
		this.parent(undefined,'Toolbar');
		this.trashable = false;
		this.div.getElement('.infohandle').destroy();
		this.div.id='EditingToolbar';
		
		var save_button = document.createElement('button');
		save_button.innerHTML = 'Save';
		save_button.onclick = function() { save_all(); };
		this.div.adopt(save_button);
		this.div.style.zIndex=-1000;
	},
	add_icon: function(icon) { this.div.getElement('.content').appendChild(icon.el); }
});

// Image Selection Window

// Text Window
var TextWindow = new Class({
	Extends: Window,
	initialize: function() {

		this.type='text';
		this.parent(undefined,'Text Window');
		this.trashable = false;

		this.div.getElement(".content").innerHTML = "This is some sample text. Press the Info Button to edit me.";
		this.div.getElement(".content").style.padding = "3px 3px";

		this.div.getElement(".infohandle").getElement(".icon").onmouseup = function()
			{ 
				var pd = this.parent_div;
				var pdc = pd.getElement('.content');			
				var pdh = pd.getElement('.handle');

				pdc.innerHTML = prompt("Please enter your new text for this box, or press Okay to keep the current text.", pdc.innerHTML);
				pdh.innerHTML = prompt("Please enter your new title for this box, or press Okay to keep the current text.", pdh.innerHTML);
			}
	},
	update: function(o) { this.div.getElement('.handle').innerHTML = o.index + hurricane_frame_num; },
});

var ClockWindow = new Class({
	Extends: Window,
	timeToString: function(d)
	{
		return d.getFullYear() + '.' + (1+d.getMonth()) + '.' + (d.getDate()) + '.' + (d.getHours()) + '.' + (d.getMinutes());
	},
	stringToTime: function(s)
	{
		var arr = s.split('.');
		return new Date(parseInt(arr[0]), parseInt(arr[1])-1, parseInt(arr[2]), parseInt(arr[3]), parseInt(arr[4])).getTime();
	},
	initialize: function() {
		this.type='clock';
		this.parent(undefined, 'Clock');
		this.starttime = new Date(2008,11,12,0,0,0).getTime();
		this.endtime = new Date(2008,11,12,12,0,0).getTime();
		
		this.div.getElement(".infohandle").getElement(".icon").onmouseup = function()
		{ 
			var pd = this.parent_div;
			var pdc = pd.getElement('.content');			
			var pdh = pd.getElement('.handle');
			var c = pd.classpointer;
			
			var new_start = prompt("Please enter the start time for data on this page. ('Year.Month.Day.Hour.Minute')", c.timeToString(new Date(c.starttime)) );
			var new_end = prompt("Please enter the end time for data on this page. ('Year.Month.Day.Hour.Minute')", c.timeToString(new Date(c.endtime)) );
			
			c.starttime = c.stringToTime(new_start);
			c.endtime   = c.stringToTime(new_end);
		}		
	},
	update: function(o) 
	{
		var human_time = (1.0 - hurricane_fractime) * this.starttime + hurricane_fractime * this.endtime;
		var d = new Date(human_time);		
		this.content.innerHTML = d.toLocaleDateString() + '  :: ' + d.toLocaleTimeString() + '<br/>' + timer.getTime() + ' secs (Real Time)';//'' + new Date().getTime();
	},
});

var last_sidex = [0, 0];
var last_sidey = [0, 0];
var last_points=0, prev_point=0;

// Map Window
var MapWindow = new Class({
	Extends: Window,
	initialize: function(mapfile) {
		this.type='map';
		this.parent(undefined,'Map');
		//if(mapfile === undefined) { 
   		this.mapfile = 'hurricane_map_1.png'; 
   	//}
		//else { this.mapfile = mapfile }
		
		// Get the map
		this.el = document.createElement('img');
		this.canvas = document.createElement('canvas');

		this.image = this.el.image = 'assets/images/' + this.mapfile;
		this.el.src = this.el.image;

		this.el.style.width = this.div.getSize().x-3 + "px";
		this.handle = this.div.getElement('.handle');
		this.el.style.height = (this.div.getSize().y - this.handle.getSize().y - 3) + "px";
		
		this.el.setAttribute('class','map');

		this.div.getElement('.content').appendChild(this.el);
		this.div.getElement('.content').appendChild(this.canvas);
		
		this.el.style.position = this.canvas.style.position = 'absolute';
		this.el.style.top = this.canvas.style.top = this.handle.getSize().y + 'px';
		this.el.style.left = this.canvas.style.left = '0px';

		// Prevent image drag
		this.el.onmousedown = function(e) { e.preventDefault(); }

		this.div.addEvent('resize', function(e){
			var el = this.getElement('.map');
			var handle = this.getElement('.handle');

			this.classpointer.canvas.width = el.style.width = this.style.width;
			this.classpointer.canvas.height = el.style.height = (this.getSize().y - handle.getSize().y - 3) + "px";

			this.classpointer.paint();
		});		

	},

	// Map bounds given in [right, top, left, bottom]
	draw_line: function(ctx, x0, y0, x1, y1, map_bounds, w, h)
	{
		x0 = w*(x0 - map_bounds[2]) / (map_bounds[0] - map_bounds[2]);
		y0 = h*(y0 - map_bounds[1]) / (map_bounds[3] - map_bounds[1]);	
		
		x1 = w*(x1 - map_bounds[2]) / (map_bounds[0] - map_bounds[2]);
		y1 = h*(y1 - map_bounds[1]) / (map_bounds[3] - map_bounds[1]);	
		
		ctx.beginPath();
		ctx.moveTo(x0, y0);
		ctx.lineTo(x1, y1);
		ctx.stroke();
	},
	paint: function()
	{
		this.canvas.width = this.el.getSize().x;
		this.canvas.height = this.el.getSize().y;

		var ctx = this.canvas.getContext('2d');
		this.handle.innerHTML = this.el.getSize().x + ' ' + this.el.getSize().y;

		ctx.strokeStyle = 'rgba(0,0,1,0.5);';

		var yc = this.handle.getSize().y;
		var w = this.canvas.getSize().x;
		var h = this.canvas.getSize().y;
		var map_left	= -100;
		var map_right	= -75;
		var map_top		= 33;
		var map_bottom	= 17.3;
		
		
		var p = '';
		for(var i=0; i < pageadvnum; i+=1)
		{	
			//alert(i);
			p = path_points[i];
			this.draw_line(ctx, p[1], p[2], p[3], p[4], new Array(map_right, map_top, map_left, map_bottom), w, h );
		}
		
		// Estimate Velocity 
		//
		// Get the index to the last point drawn
		last_point = parseInt(Math.max(0,Math.floor(pageadvnum-1)));
		prev_point = parseInt(Math.max(0,last_point-1));

		last_sidex = [p[3], p[3]];
		last_sidey = [p[4], p[4]];
		
		// Lat/Long change per hour
		var velx = (p[3] - p[1]) / 6;
		var vely = (p[4] - p[2]) / 6;
		
		// Draw estimate at ...
		var error_table = [];
		error_table[0] = this;
		error_table[24] = 75;
		error_table[36] = 100;
		error_table[48] = 125;
		error_table[72] = 180;
		
		ctx.strokeStyle = '#FF0000';
		var lookback = 1;
		error_table.forEach(function(el, index, array)
			{
				if(index > 0)
				{
					var map = array[0];
					var p = path_points[last_point];
					//alert(last_point);
					var newx = p[1] + index * velx;
					var newy = p[2] + index * vely;
					var l = Math.sqrt(velx*velx + vely*vely);
					if(l > 0)
					{					
						// Create perpendicular normal scaled to lat/long
						var perpx = -vely/(l*60);
						var perpy =  velx/(l*60);
						
						map.draw_line(ctx, p[1], p[2], newx, newy, new Array(map_right, map_top, map_left, map_bottom), w, h );				
						
						// Two side lines
						map.draw_line(ctx, newx, newy, newx+perpx*el, newy+perpy*el, new Array(map_right, map_top, map_left, map_bottom), w, h );
						map.draw_line(ctx, newx, newy, newx-perpx*el, newy-perpy*el, new Array(map_right, map_top, map_left, map_bottom), w, h );				
						
						// Draw the two side cone lines
						map.draw_line(ctx, last_sidex[0], last_sidey[0], newx+perpx*el, newy+perpy*el, new Array(map_right, map_top, map_left, map_bottom), w, h );
						map.draw_line(ctx, last_sidex[1], last_sidey[1], newx-perpx*el, newy-perpy*el, new Array(map_right, map_top, map_left, map_bottom), w, h );
						last_sidex = [newx+perpx*el, newx-perpx*el];
						last_sidey = [newy+perpy*el, newy-perpy*el];
					}
					lookback++;
				}
			}
		);

	},

	update: function(o) 
	{
		this.paint();
	},
});

var TableWindow = new Class({
	Extends: Window,
	initialize: function(experiment, file)
	{
		this.file = file == null ? 'advisory1.txt' : file;
		this.type='table';
		this.parent(undefined,'Table');
		if (true)//typeof editing != 'undefined')
		{	
			// If we get here, the user is performing an actual experiment
			// Insert the actual table
			this.table = new Element('table');
			this.table.setAttribute('class', 'dynaview_table');
			this.table.setAttribute('id', file+"_");
			this.border='1';
			
			
			//alert(this.div.id);
			table_parser(experiment_shortname, this.file, this.div.id);

			var data = table_data[this.file];
			
			for(var i=0; i < data.length; i+=1)
			{
				var tr = new Element('tr');
				this.table.adopt(tr);
				
				for(var j=0; j < data[i].length;j+=1)
				{
					var td = new Element('td');
					tr.adopt(td);
					td.innerHTML = '<center>' + data[i][j] + '</center>';
				}
			}
			this.content.adopt(this.table);
			
		}
	},
});

//////////////////////////////////////////
// ICONS
//////////////////////////////////////////

var newdiv;
// Icon to go on the toolbar
var ToolbarIcon = new Class({
	initialize: function(_image, type, draggable) {
		
		// Setup the image
		this.image = 'assets/images/'+_image;
		this.el = document.createElement('img');
		
		this.el.candrag = draggable !== undefined;
		
		this.el.onmousedown = function(event) 
		{ 
			if(this.candrag)
			{
				// Create the new toolbar and the dragging functionality.
				var tb2;
				
				if( type == 'map_window') tb2 = new MapWindow();
				else if( type == 'text_window') tb2 = new TextWindow();
				else if( type == 'clock_window') tb2 = new ClockWindow();
				else if( type == 'table_window') tb2 = new TableWindow();

				newdiv = tb2.div;
				newdiv.style.top = event.pageY + "px"; 
				newdiv.style.left = event.pageX + "px";
				
				// A bit of a hack...
				document.onmousemove = function(e) { 
					newdiv.style.top = e.pageY + "px"; 
					newdiv.style.left = e.pageX + "px"; 
					this.onmouseup = function(e) { this.onmousemove = null; } 
				};
				
				// Cancel dragging the image most likely.
				event.preventDefault(); 
			}
			else { event.preventDefault(); }
		};
		this.el.src = this.image;
	}
});

var ToolbarIcon_Trashbin = new Class({
	Extends: ToolbarIcon,
	initialize: function() {
		this.parent('trash_icon.png', 'trash');
		this.el.id = 'trashbin';
	}
});

var ToolbarIcon_TextWindow = new Class({
	Extends: ToolbarIcon,
	initialize: function() {
		this.parent('window_icon_1.png', 'text_window', true);
	}
});

var ToolbarIcon_MapWindow = new Class({
	Extends: ToolbarIcon,
	initialize: function() {
		this.parent('map_icon.png', 'map_window', true);
	}
});

var ToolbarIcon_ClockWindow = new Class({
	Extends: ToolbarIcon,
	initialize: function() {
		this.parent('clock-icon.png', 'clock_window', true);
	}
});

var ToolbarIcon_TableWindow = new Class({
	Extends: ToolbarIcon,
	initialize: function() {
		this.parent('table-icon.png', 'table_window', true);
	}
});

function update_stuff(el)
{
	var content = 'Location: ' + el.getPosition()['x'] + ' , ' + el.getPosition()['y'] + '<br/>';
	content += 'Size: ' + el.getSize().x + ' , ' + el.getSize().y;
}

var save_all = function()
{
	var save_string = '';
	var windows_added_so_far = 0;
	for(var i=0; i < updatables.length; i+=1)
	{		
		var w = updatables[i];
		if(w.type == 'toolbar') { continue; } // Don't save toolbars
		if(w.div.getElement('.handle') == null) { continue; }
		
		//
		var type = str_to_hex(w.type);
		
		//
		var title = str_to_hex(w.div.getElement('.handle').innerHTML);
		
		//
		var top_left_x = w.div.style.left;
		var top_left_y = w.div.style.top;
		var window_width = w.get_width();
		var window_height = w.get_height();		
		var rect = str_to_hex( top_left_x ) + ',' + str_to_hex( top_left_y ) + ',' + str_to_hex( window_width.toString() ) + ',' + str_to_hex( window_height.toString() );
		alert(rect);
		
		//
		save_string += type + ',' + title + ',' + rect + ',';
		
		if(w.type == 'text')
		{
			save_string += str_to_hex(w.div.getElement('.content').innerHTML);
		}
		else if(w.type == 'table')
		{
			save_string += str_to_hex(w.file);
		}
		else if(w.type == 'map')
		{
   		alert('saving map as ' + w.mapfile);
			save_string += str_to_hex(w.mapfile);
		}
		
		save_string += '&';
	}
	
	// Clip off the last extra '&'
	save_string = save_string.substring(0,save_string.length-1);
	
	// Send var myHTMLRequest = new Request.HTML({url:'load/'}).get({'user_id': 25});
	var filepath = 'hurricane_data/'+experiment_shortname+'/training_adv_'+pageadvnum+'.txt';
	var req = new Request({
		url: 'assets/php/save_training.php', 
		async: true, method: 'post', 
		data: {
			'num': pageadvnum, 
			'file_path': filepath,
			'data_string': save_string
			}, 
		onComplete: function(r) {alert('Saved. Reponse is "'+ r +'".');} 
	}).send();
}

// Jon test function
var resizeUpdate = function(el){
   el.width = el.width+1;
   el.height = el.height+1;
}

var load_all = function(file)
{
	var req = new Request({
	url: file,
	async: false,
	onComplete: function(response)
		{
			alert('in load_all');
			alert(response);
			var windows = response.split('&');
			for(var i=0;i<windows.length;++i)
			{
				var attributes = windows[i].split(',');
				var handle = '';
				
				// Figure out the type
				var type = hex_to_str(attributes[0]);
				if( type == 'text')
				{
					handle = new TextWindow();		
					handle.set_trashable(true);	
					handle.div.getElement('.handle').innerHTML = hex_to_str(attributes[1]);
					
					//Position and Size
					var posx = ( hex_to_str(attributes[2]) );
					var posy = ( hex_to_str(attributes[3]) );
					var width = ( hex_to_str(attributes[4]) );
					var height = ( hex_to_str(attributes[5]) );

					handle.div.style.left = posx;
					handle.div.style.top = posy;
					handle.div.style.width = width + 'px';
					handle.div.style.height = height + 'px';
					
					// Content
					handle.div.getElement('.content').innerHTML = hex_to_str(attributes[6]);
				}
				else if( type == 'table' )
				{
					handle = new TableWindow(experiment_shortname, hex_to_str(attributes[6]) );
					handle.set_trashable(true);				
					handle.div.getElement('.handle').innerHTML = hex_to_str(attributes[1]);
					
					//Position and Size
					var posx = ( hex_to_str(attributes[2]) );
					var posy = ( hex_to_str(attributes[3]) );
					var width = ( hex_to_str(attributes[4]) );
					var height = ( hex_to_str(attributes[5]) );

					handle.div.style.left = posx;
					handle.div.style.top = posy;
					handle.div.style.width = width + 'px';
					handle.div.style.height = height + 'px';
					
					if(true)//editing !== undefined)
      			{
         		   coverTable(	handle.table.id);
      			}
      			
      			// Jon test stuff
      			document.getElementById(handle.table.id).width = width;
      			document.getElementById(handle.table.id).height = height;
      			
      			handle.table.width = width;
      			handle.table.height = height;
      			//resizeUpdate(handle);
				}
				else if( type == 'map' )
				{
					handle = new MapWindow(experiment_shortname, hex_to_str(attributes[6]) );	
					handle.set_trashable(true);			
					handle.div.getElement('.handle').innerHTML = hex_to_str(attributes[1]);
					
					//Position and Size
					var posx = ( hex_to_str(attributes[2]) );
					var posy = ( hex_to_str(attributes[3]) );
					var width = ( hex_to_str(attributes[4]) );
					var height = ( hex_to_str(attributes[5]) );

					handle.div.style.left = posx;
					handle.div.style.top = posy;
					handle.div.style.width = width + 'px';
					handle.div.style.height = height + 'px';
					resizeUpdate(handle);
				}
				
				//Add it to the page
				
			}
			
			
//			new MapWindow()
			
			
		}
	}).send();
}

window.addEvent('domready', function()
{
	var ifr = document.createElement("div");
	ifr.style.display = 'none';
	ifr.innerHTML = '<img id="HM" src="assets/images/hurricane_map_1.png" />';
	document.body.appendChild(ifr);

	if(editing !== undefined)
	{
    	var tb = new Toolbar();
   	tb.add_icon(new ToolbarIcon_Trashbin());
   	tb.add_icon(new ToolbarIcon_MapWindow());
   	tb.add_icon(new ToolbarIcon_TextWindow());
   	tb.add_icon(new ToolbarIcon_ClockWindow());
   	tb.add_icon(new ToolbarIcon_TableWindow());
   }
   
});
